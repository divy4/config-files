#!/usr/bin/env bash
# shellcheck disable=SC1090,SC2034,SC2128,SC2154,SC3046

##### Figure out what's going on ######

# Determine the shell executing this
PROFILE_SHELL="$(ps --pid "$$" -o comm | tail -1)"
case "$PROFILE_SHELL" in
zsh)
  # Measure time from when profile was sourced (see prompt section below)
  PROMPT_START_TIME="$(date +%s.%N)";;
bash)
  # Measure time from when profile was sourced (see prompt section below)
  PROMPT_START_TIME="$(date +%s)";;
sh)
  ;;
*)
  echo "Error: Unknown shell '$PROFILE_SHELL'"
  return;;
esac

# Determine what OS we're running
case "$(uname -s)" in
  Linux*)
    PROFILE_OS_ID="$(grep -Po '(?<=^ID=).*' /etc/os-release)";;
  CYGWIN*|MINGW*)
    PROFILE_OS_ID='windows';;
  *)
    echo "Error: Unrecognized OS '$(uname -s)'"
    return;;
esac

# Determine if we're in WSL
if [ -n "$WSL_DISTRO_NAME" ]; then
  PROFILE_IS_WSL='true'
else
  PROFILE_IS_WSL='false'
fi



##### Environment variables #####

# Fix konsole TERM value
if [ -n "$KONSOLE_VERSION" ]; then
  export TERM='konsole'
fi

export PATH="$PATH:/home/dan/.local/bin"
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/opt/cuda/targets/x86_64-linux/lib"
export XDG_MENU_PREFIX=arch-

# fix gpg
export GPG_TTY="$(tty)"
if [ -n "$SSH_CONNECTION" ]; then
  export PINENTRY_USER_DATA="USE_CURSES=1"
fi

# enable docker buildkit
export DOCKER_BUILDKIT=1

# Set nano as default editor for noninteractive sessions
export VISUAL='nano'
export EDITOR='nano'

# If not running interactively, stop here.
case "$-" in
  *i*)
    ;;
  *)
    return;;
esac

# ...and set VS Code as default editor for interactive sessions
if command -v codium >/dev/null; then
  export VISUAL='codium --wait'
  export EDITOR='codium --wait'
elif command -v code >/dev/null; then
  export VISUAL='code --wait'
  export EDITOR='code --wait'
fi

# Set qt configuration tool
export QT_QPA_PLATFORMTHEME='qt6ct'

# Packer directories
case "$PROFILE_OS_ID" in
  windows)
    export PACKER_CACHE_DIR='/c/packer'
    export PACKER_VM_DIR='/w/packer_vms';;
  *)
    export PACKER_CACHE_DIR='/tmp/packer'
    export PACKER_VM_DIR='/var/vms';;
esac


##### History #####
case "$PROFILE_SHELL" in
zsh)
  HISTFILE=~/.zsh_history
  HISTSIZE=10000
  SAVEHIST=10000
  # Limit what's stored to zsh history
  function zshaddhistory {
    emulate -L zsh
    # Commands that start with spaces or have password flags
    # Commands that the line starts with
    # Commands that appear anywhere in a set of pipes
    if [[ "$line" =~ "(^ |--password|^\.config$)" ]] \
      || [[ "$line" =~ "^(sudo *)?(cd|clear|exit|ls|headphones|make|startx)( |$)" ]] \
      || [[ "$line" =~ "^(.*\| *)?(sudo *)?(generate_password|gocryptfs)( |$)" ]]; then
        return 1
    else
        print -sr -- "${1%%$'\n'}"
        fc -p
    fi
  }
  ;;
bash)
  ;;
sh)
  ;;
esac



##### Terminal and shell options #####

case "$PROFILE_SHELL" in
zsh)
  # autocd       > cd to directory if command is a directory
  # extendedglob > use extended glob matching patterns
  # nomatch      > throw error if pattern didn't match any files
  # notify       > print background process status when the process exits
  # beep         > beep on error
  setopt autocd extendedglob nomatch notify
  unsetopt beep
  ;;
bash)
  ;;
sh)
  ;;
esac

# Set cursor to vertical bar
echo -e -n '\x1b[\x36 q'



##### Key bindings #####

case "$PROFILE_SHELL" in
zsh)
  # Generate a zkbd file, if it doesn't already exist
  # shellcheck disable=SC2299,SC3028,SC3057
  zkbd_file="$HOME/.zkbd/$TERM-${${DISPLAY:t}:-$VENDOR-$OSTYPE}"
  if [ ! -f "$zkbd_file" ]; then
    echo "Special key mapping file ($zkbd_file) not found, generating a new one..."
    # Immediately load function definition via +X
    autoload -Uz +X zkbd
    # Edit zkbd to include extra key bindings
    extra_keys=(
      ControlBackspace ControlDelete
      ControlLeft ControlRight ControlUp ControlDown
    )
    # ...and reorder the arrow keys because I use weird keyboards
    eval "$(
      declare -f zkbd \
      | sed "s/Up Left Down Right/Left Right Up Down/g" \
      | sed "s/\(pckeys.*\))/\1 $extra_keys)/g"
    )"
    zkbd
  fi
  source "$zkbd_file"

  # Use emac-style key bindings as the base
  bindkey -e

  # Additional bindings

  # Bind a key to an action, but only if it's key value doesn't match additional
  # listed keys. This is a fix for some terminals not making a difference
  # between pressing special characters, like backspace, vs pressing the same
  # key with modifiers.
  function bindkey_if_unique() {
    input_key="$1"
    action="$2"
    other_keys=("${@:3}")

    # Exit early if other key matches one of the other keys
    for other_key in "${other_keys[@]}"; do
      if [[ "${key[$input_key]}" == "${key[$other_key]}" ]]; then
        return 1
      fi
    done

    # Finally, bind the key
    bindkey "${key[$input_key]}" "$action"
  }

  # Deleting
  bindkey_if_unique Delete            delete-char
  bindkey_if_unique ControlDelete     delete-word           Delete
  bindkey_if_unique ControlBackspace  backward-delete-word  Backspace

  # Navigation
  bindkey_if_unique ControlLeft   backward-word     Left
  bindkey_if_unique ControlRight  forward-word      Right
  bindkey_if_unique Left          backward-char
  bindkey_if_unique Right         forward-char
  bindkey_if_unique Home          beginning-of-line
  bindkey_if_unique End           end-of-line

  # Cleanup
  unset -f bindkey_if_unique
  unset extra_keys zkbd_file
  ;;
bash)
  ;;
sh)
  ;;
esac




##### Auto complete #####

case "$PROFILE_SHELL" in
zsh)
  # End of lines configured by zsh-newuser-install
  # The following lines were added by compinstall
  zstyle :compinstall filename '/home/dan/.zshrc'

  # Load autocompletions
  autoload -Uz compinit && compinit
  ;;
bash)
  ;;
sh)
  ;;
esac



##### Prompt ####

case "$PROFILE_SHELL" in
zsh)
  # Load extended prompt info
  autoload -Uz vcs_info
  setopt prompt_subst

  # Prompt formatting for git repos
  zstyle ':vcs_info:*' enable git
  zstyle ':vcs_info:git:*' formats       '%b '
  zstyle ':vcs_info:git:*' actionformats '%b %F{magenta}%a '

  # Explanation of PROMPT_START_TIME:
  # Order of operations is a bit weird here, so here's a block of text to
  # explain what's going on. The prompt includes a yellow time section, which
  # displays the start time and execution time for 1 of 3 things:
  #
  # - If a command was just run, show the command start time and execution time.
  # - If enter was pressed with no command, show the time the last prompt was
  #   rendered and how long ago that was.
  # - If the shell just started up, show when this file was sourced and how long
  #   it took to be sourced.

  function preexec {
    # Measure time from start of command execution
    PROMPT_START_TIME="$(date +%s.%N)"
  }

  function precmd {
    # Measure time
    local end_time
    end_time="$(date +%s.%N)"
    zsh_prompt_start_time="$(date -d "@$PROMPT_START_TIME" +%T)"
    zsh_prompt_diff_time="$(printf '%.2fs' $((end_time - PROMPT_START_TIME)))"

    # Measure time from previous prompt (i.e. enter pressed with no command)
    PROMPT_START_TIME="$end_time"

    # Set vcs_info_msg_0_
    vcs_info
  }

  # Shell prompt
  # shellcheck disable=SC2016
  PROMPT='%F{red}${zsh_prompt_start_time} %F{yellow}${zsh_prompt_diff_time} %F{green}%~ %F{cyan}${vcs_info_msg_0_}%f%(?..[%?] )$ '

  # Prepend hostname if not running in an X session
  if [[ -z "${DISPLAY:-}" ]]; then
    PROMPT="%m $PROMPT"
  fi
  ;;
bash)
  # Using PROMPT_COMMAND to dynamically update the prompt
  PROMPT_COMMAND='precmd'
  function precmd {
    local exit_code="$?"
    local end_time start_time diff_time exit_status

    # Time
    end_time="$(date +%s)"
    start_time="$(date -d "@$PROMPT_START_TIME" +%T)"
    diff_time="$(printf '%is' $((end_time - PROMPT_START_TIME)))"

    # Exit status
    if [[ "$exit_code" -eq 0 ]]; then
      exit_status=""
    else
      exit_status="[$exit_code] "
    fi

    local RED='\[\033[31m\]'
    local YELLOW='\[\033[33m\]'
    local GREEN='\[\033[32m\]'
    local CYAN='\[\033[36m\]'
    local PURPLE='\[\033[35m\]'
    local WHITE='\[\033[37m\]'

    # Update prompt (because bash doesn't resolve variables within the prompt)
    PS1="${PURPLE}${start_time} ${CYAN}${diff_time} ${GREEN}\w $WHITE${exit_status}$ "

    # Prepend hostname if not running in an X session
    if [[ -z "${DISPLAY:-}" ]]; then
      PS1="\h $PS1"
    fi

    # Measure time from previous prompt (i.e. enter pressed with no command)
    PROMPT_START_TIME="$end_time"
  }
  ;;
sh)
  ;;
esac



##### Aliases #####

# clipboard
if command -v clip.exe >/dev/null; then
  alias clipboard='clip.exe'
elif command -v xclip >/dev/null; then
  alias clipboard='xclip -selection clipboard'
  alias primary='xclip -selection primary'
  alias secondary='xclip -selection secondary'
fi

# AWS
# Source authenticate_aws_cli instead of running it directly
alias authenticate_aws_cli='source authenticate_aws_cli'

# compressing/decompressing
alias   compresstar='tar -cf'
alias decompresstar='tar -xf'
alias   compressgz='tar -czf'
alias decompressgz='tar -xzf'

# git
alias ga='git add'
alias gaa='git add -A'
alias gaacapfwl='git add -A; git commit --amend --no-edit; git push --force-with-lease'
alias gb='git branch'
alias gbprune='git prune-local-branches'
alias gc='git commit -m'
alias gupstream='git set-upstream'
alias gca='git commit --amend --no-edit'
alias gd='git diff'
alias gf='git fetch --all'
alias gl='git lg'
alias gmv='git mv'
alias gpull='git pull'
alias gpush='git push'
alias gpushfwl='git push --force-with-lease'
alias grb='git rebase'
alias grbc='git rebase --continue'
alias grbi='git rebase --interactive'
alias grbmain='git fetch origin; git rebase origin/main; git push --force-with-lease'
alias grbmaster='git fetch origin; git rebase origin/master; git push --force-with-lease'
alias grm='git rm'
alias gs='git status'

# misc
alias cl='clear;'
alias cl2='clear;clear;'
alias cls='clear;ls'
alias df='df -h'
alias du='du -cah --apparent-size'
alias gdiff='git diff --no-index'
alias grep='grep --color=auto'
alias l='ls'
alias ls='ls --color=auto'
alias la='ls -a'
alias ll='ls -l'
alias lla='ls -la'
alias l1='ls -1'
alias vim='vim -o' #always open multiple files in split mode

# tools
if command -v codium >/dev/null; then
  alias code='codium'
fi



##### Final steps #####

# When in work WSL...
if [[ "$PROFILE_IS_WSL" == 'true' ]] && [[ "$(whoami)" != 'dan' ]]; then
  # Start in projects folder
  cd "$HOME/projects" || true
fi
